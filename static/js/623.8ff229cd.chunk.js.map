{"version":3,"file":"static/js/623.8ff229cd.chunk.js","mappings":"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","sources":["ChatBox.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { Button, Input, message, Spin } from \"antd\";\r\nimport { user } from \"./getUser\";\r\nimport * as graphql from \"./graphql\";\r\nimport { Bubble, Card, Container, Scroll, Text } from \"./Components\";\r\n\r\ninterface ChatBoxProps {\r\n  user: user | null;\r\n  room: graphql.GetJoinedRoomsQuery[\"user_room\"][0][\"room\"] | undefined;\r\n  handleClose: () => void;\r\n}\r\n\r\nconst ChatBox: React.FC<ChatBoxProps> = ({ user, room, handleClose }) => {\r\n  const [text, setText] = useState<string>(\"\");\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n\r\n  const { data, error } = graphql.useGetMessagesByRoomSubscription({\r\n    skip: !room,\r\n    variables: {\r\n      room_uuid: room?.uuid,\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    if (error) {\r\n      console.error(error);\r\n      message.error(\"获取消息失败！\");\r\n    }\r\n  }, [error]);\r\n\r\n  const [addMessageMutation] = graphql.useAddMessageMutation();\r\n\r\n  const handleSend = async () => {\r\n    setLoading(true);\r\n    if (!text) {\r\n      message.error(\"消息不能为空！\");\r\n      return setLoading(false);\r\n    }\r\n    const result = await addMessageMutation({\r\n      variables: {\r\n        user_uuid: user?.uuid,\r\n        room_uuid: room?.uuid,\r\n        content: text,\r\n      },\r\n    });\r\n    if (result.errors) {\r\n      console.error(result.errors);\r\n      message.error(\"发送消息失败！\");\r\n    }\r\n    setText(\"\");\r\n    setLoading(false);\r\n  };\r\n\r\n  const Close = () => (\r\n    <Button\r\n      type=\"link\"\r\n      style={{\r\n        width: \"40px\",\r\n        height: \"40px\",\r\n        fontSize: \"12px\",\r\n        position: \"absolute\",\r\n        right: 0,\r\n        top: 0,\r\n      }}\r\n      className=\"need-interaction\"\r\n      onClick={handleClose}\r\n    >\r\n      ❌\r\n    </Button>\r\n  );\r\n\r\n  if (!user || !room) {\r\n    return null;\r\n  }\r\n  return (\r\n    <Card style={{ width: \"300px\", height: \"500px\" }}>\r\n      <Close />\r\n      <Container style={{ margin: \"6px\" }}>\r\n        <Text>\r\n          <strong>{room.name}</strong>\r\n        </Text>\r\n        <Text size=\"small\" style={{ marginTop: \"6px\", marginBottom: \"6px\" }}>\r\n          {room.intro}\r\n        </Text>\r\n      </Container>\r\n      <MessageFeed user={user} messages={data?.message} />\r\n      <div\r\n        className=\"need-interaction\"\r\n        style={{\r\n          marginTop: \"12px\",\r\n          display: \"flex\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <Input\r\n          placeholder=\"输入消息\"\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n          style={{ fontSize: \"18px\", height: \"40px\" }}\r\n        />\r\n        <Button\r\n          style={{ height: \"40px\", fontSize: \"18px\", marginLeft: \"12px\" }}\r\n          onClick={handleSend}\r\n          type=\"primary\"\r\n          loading={loading}\r\n        >\r\n          <strong>发送</strong>\r\n        </Button>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\ninterface MessageFeedProps {\r\n  user: user;\r\n  messages: graphql.GetMessagesByRoomSubscription[\"message\"] | undefined;\r\n}\r\n\r\nconst MessageFeed: React.FC<MessageFeedProps> = ({ user, messages }) => {\r\n  const bottomRef = useRef<HTMLDivElement | null>(null);\r\n  useEffect(() => {\r\n    bottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <Scroll>\r\n      {messages ? (\r\n        messages.map((message, index) => (\r\n          <div\r\n            ref={index === messages.length - 1 ? bottomRef : null}\r\n            key={index}\r\n          >\r\n            <MessageBubble user={user} message={message} />\r\n          </div>\r\n        ))\r\n      ) : (\r\n        <Container style={{ height: \"100%\" }}>\r\n          <Spin size=\"large\" />\r\n        </Container>\r\n      )}\r\n    </Scroll>\r\n  );\r\n};\r\n\r\ninterface MessageBubbleProps {\r\n  user: user;\r\n  message: graphql.GetMessagesByRoomSubscription[\"message\"][0];\r\n}\r\n\r\nconst MessageBubble: React.FC<MessageBubbleProps> = ({ user, message }) => {\r\n  const isSelf = user.uuid === message.user.uuid;\r\n  const dateUTC = new Date(message.created_at);\r\n  const date = new Date(\r\n    dateUTC.getTime() - dateUTC.getTimezoneOffset() * 60000\r\n  );\r\n  return (\r\n    <div\r\n      style={{\r\n        margin: \"6px 0\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        flexWrap: \"nowrap\",\r\n        alignItems: isSelf ? \"flex-end\" : \"flex-start\",\r\n      }}\r\n    >\r\n      <div style={{ marginLeft: \"12px\", marginRight: \"12px\" }}>\r\n        <Text size=\"small\">{message.user.username}</Text>\r\n        <Text size=\"small\" style={{ marginLeft: \"6px\" }}>\r\n          {date.toLocaleString(\"zh-CN\")}\r\n        </Text>\r\n      </div>\r\n      <Bubble\r\n        style={{\r\n          minHeight: \"24px\",\r\n          width: \"fit-content\",\r\n          maxWidth: \"80%\",\r\n          backgroundColor: isSelf\r\n            ? \"rgba(4, 190, 2, 0.25)\"\r\n            : \"rgba(255, 255, 255, 0.25)\",\r\n        }}\r\n      >\r\n        <Text style={{ wordBreak: \"break-all\" }}>{message.content}</Text>\r\n      </Bubble>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBox;\r\n"],"names":["MessageFeed","_ref2","user","messages","bottomRef","useRef","useEffect","_bottomRef$current","current","scrollIntoView","behavior","_jsx","Scroll","children","map","message","index","ref","length","MessageBubble","Container","style","height","Spin","size","_ref3","isSelf","uuid","dateUTC","Date","created_at","date","getTime","getTimezoneOffset","_jsxs","margin","display","flexDirection","flexWrap","alignItems","marginLeft","marginRight","Text","username","toLocaleString","Bubble","minHeight","width","maxWidth","backgroundColor","wordBreak","content","_ref","room","handleClose","text","setText","useState","loading","setLoading","data","error","graphql","skip","variables","room_uuid","console","addMessageMutation","Close","Button","type","fontSize","position","right","top","className","onClick","Card","name","marginTop","marginBottom","intro","Input","placeholder","value","onChange","e","target","async","result","user_uuid","errors"],"sourceRoot":""}